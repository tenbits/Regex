UTest({

	'should match natives' () {
		[{
				regex: 'foo',
				input: 'asdfoooo',
				index: 3,
				match: ['foo']
			}, {
				regex: '[\\d]+',
				input: 'asdf145oooo',
				index: 4,
				match: ['145']
			}, {
				regex: '(?:a)d',
				input: 'cdad',
				index: 2,
				match: ['ad']
			}, {
				regex: '(?:a)d|(c)',
				input: 'fdgdc',
				index: 4,
				match: ['c', 'c']
			}, {
				regex: 'd|((g|(b|(a|c))))',
				input: 'oiac',
				index: 2,
				match: ["a", "a", "a", "a", "a"]
			}
		]
			.forEach(Assert);

	},

	'should match considering flags': {
		'should handle free spacing' () {
			[
				{
					regex: `b(?x)
						# comment
						\\ d
					`,
					input: 'abccb1s',
					index: 4,
					match: ['b1']
				}
			].forEach(Assert);
		},
		'should handle case-(in)sensitive' () {
			[
				{
					regex: '(?i)bob|Foo',
					input: 'afOOBob',
					index: 1,
					match: ['fOO']
				},
				{
					regex: '(?i)bob|(?-i)Foo',
					input: 'afOOBob',
					index: 4,
					match: ['Bob']
				},
				{
					regex: '((?i)bob)|Foo',
					input: 'afOOBob',
					index: 4,
					match: ['Bob', 'Bob']
				},
				{
					regex: '((?i)bob)|(f[oO]+)',
					input: 'afOOBob',
					index: 1,
					match: ['fOO', null, 'fOO']
				},
				{
					regex: '((?i)\\d+)\\s*((?i)PARTY) in (\\w+)',
					input: 'New Year 2015 Party in London',
					index: 9,
					match: ['2015 Party in London', '2015', 'Party', 'London']
				},
				{
					regex: 'a((?i)bc|b)c',
					input: 'abCc',
					index: 0,
					match: ['abCc', 'bC']
				},
				{
					regex: 'a((?i)bc|b)c',
					input: 'aBc',
					index: 0,
					match: ['aBc', 'B']
				}
			]
				.forEach(Assert);
		}
	}
});

function Assert(data) {
	var rgx = new Regex(data.regex);
	var match = rgx.exec(data.input);
	if (match == null && data.match != null) {
		throw Error('Pattern shoud be matched: ' + data.regex);
	}

	eq_(match.index, data.index);

	var arr = Array.from(match);
	deepEq_(arr, data.match);
}