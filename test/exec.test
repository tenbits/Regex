UTest({

	'should match natives' () {
		[
			{
				regex: 'foo',
				input: 'asdfoooo',
				match: {
					value: 'foo',
					index: 3,
					groups: []
				}
			},
			{
				regex: '[\\d]+',
				input: 'asdf145oooo',
				match: {
					value: '145',
					index: 4,
					groups: []
				}
			},
			{
				regex: '(?:a)d',
				input: 'cdad',
				match: {
					value: 'ad',
					index: 2,
					groups: []
				}
			},
			{
				regex: '(?:a)d|(c)',
				input: 'fdgdc',
				index: 4,
				match: {
					value: 'c',
					index: 4,
					groups: [{
						value: 'c',
						index: 4
					}]
				}
			},
			{
				regex: 'd|((g|(b|(a|c))))',
				input: 'oiac',
				match: {
					value: 'a',
					index: 2,
					groups: [
						{
							value: 'a',
							index: 2,
						},
						{
							value: 'a',
							index: 2,
						},
						{
							value: 'a',
							index: 2,
						},
						{
							value: 'a',
							index: 2,
						}
					]
				}
			}
		]
			.forEach(Assert);

	},

	'should match considering flags': {
		'should handle free spacing' () {
			[
				{
					regex: `b(?x)
						# comment
						\\ d
					`,
					input: 'abccb1s',
					match: {
						value: 'b1',
						index: 4,
						groups: []
					}
				}
			].forEach(Assert);
		},
		'should handle case-(in)sensitive' () {
			[
				{
					regex: '(?i)bob|Foo',
					input: 'afOOBob',
					match: {
						value: 'fOO',
						index: 1,
						groups: []
					}
				},
				{
					regex: '(?i)bob|(?-i)Foo',
					input: 'afOOBob',
					index: 4,
					match: {
						value: 'Bob',
						index: 4,
						groups: []
					}
				},
				{
					regex: '((?i)bob)|Foo',
					input: 'afOOBob',
					match: {
						value: 'Bob',
						index: 4,
						groups: [
							{
								value: 'Bob',
								index: 4
							}
						]
					}
				},
				{
					regex: '((?i)bob)|(f[oO]+)',
					input: 'afOOBob',
					index: 1,
					match: {
						value: 'fOO',
						index: 1,
						groups: [
							null,
							{
								value: 'fOO',
								index: 1
							}
						]
					}
				},
				{
					regex: '((?i)\\d+)\\s*((?i)PARTY) in (\\w+)',
					input: 'New Year 2015 Party in London',
					index: 9,
					match: {
						value:'2015 Party in London',
						index: 9,
						groups:[
							{
								value: '2015',
								index: 9,
							},
							{
								value: 'Party',
								index: 14,
							},
							{
								value: 'London',
								index: 23
							}]
					}
				},
				{
					regex: 'a((?i)bc|b)c',
					input: 'abCc',
					index: 0,
					match: {
						value: 'abCc',
						index: 0,
						groups:[
							{
								value: 'bC',
								index: 1
							}
						]
					}
				},
				{
					regex: 'a((?i)bc|b)c',
					input: 'aBc',
					index: 0,
					match: {
						value: 'aBc',
						index: 0,
						groups: [
							{
								value: 'B',
								index: 1
							}
						]
					}
				}
			]
				//.slice(6, 7)
				.forEach(Assert);
		}
	},
	'should unmatch' () {

		var rgx = new Regex('\\b([a-zA-Z_?.$][\\w?.$]*)\\s*:\\s*\\b(function)?\\s*(\\()');
		var start = Date.now();
		var match = rgx.match(`
							  window.addEventListener( "load", completed, false );
				`);

		assert.lte_(Date.now() - start, 10);
		eq_(match, null);
	},
	'should match forward slashes' () {
		var rgx = new Regex('//');
		var match = rgx.match('\n // foo')
		eq_(match.index, '2');
		eq_(match.value, '//');
	},
	'should match doc el' () {
		var rgx = new Regex('(?<=\\.)(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))\\b');
		var match = rgx.match('doc.documentElement')
		eq_(match.index, 4);
		eq_(match.value, 'documentElement');
	},
	'should match function params' () {
		var rgx = new Regex("(?:((')(.*?)('))|((\")(.*?)(\")))\\s*:\\s*\\b(function)?\\s*(\\()")
		var match = rgx.match('		"ATTR": function( match ) {');
		eq_(match.index, 2)
		deepEq_(match.groups[4], {
			value: '"ATTR"',
			index: 2
		});
	},
	'!should match numbers' () {
		var rgx = new Regex("(?x)\\b\n\t\t\t\t\t\t\t    (0*((1?[0-9]{1,2})|(2([0-4][0-9]|5[0-5])))\\s*,\\s*){2}\n\t\t\t\t\t\t\t    (0*((1?[0-9]{1,2})|(2([0-4][0-9]|5[0-5])))\\b)\n\t\t\t\t\t\t\t    (\\s*,\\s*((0?\\.[0-9]+)|[0-1]))?\n\t\t\t\t\t\t\t");
		var match = rgx.match('0, 0, 0, 0')
		eq_(match.index, 0);
	}
});

function Assert(data) {
	var rgx = new Regex(data.regex);
	var match = rgx.match(data.input);
	if (match == null && data.match != null) {
		throw Error('Pattern shoud be matched: ' + data.regex);
	}

	deepEq_(match, data.match);

	var arr = rgx.exec(data.input, 0);
	eq_(arr.index, data.match.index);


	var groups = data.match.groups.map(x => x && x.value);
	groups = [ data.match.value, ...groups ];

	deepEq_(Array.from(arr), groups);
}