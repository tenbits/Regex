UTest({

	'should match natives' () {
		[
			{
				regex: 'foo',
				input: 'asdfoooo',
				match: {
					value: 'foo',
					index: 3,
					groups: []
				}
			},
			{
				regex: '[\\d]+',
				input: 'asdf145oooo',
				match: {
					value: '145',
					index: 4,
					groups: []
				}
			},
			{
				regex: '(?:a)d',
				input: 'cdad',
				match: {
					value: 'ad',
					index: 2,
					groups: []
				}
			},
			{
				regex: '(?:a)d|(c)',
				input: 'fdgdc',
				index: 4,
				match: {
					value: 'c',
					index: 4,
					groups: [{
						value: 'c',
						index: 4
					}]
				}
			},
			{
				regex: 'd|((g|(b|(a|c))))',
				input: 'oiac',
				match: {
					value: 'a',
					index: 2,
					groups: [
						{
							value: 'a',
							index: 2,
						},
						{
							value: 'a',
							index: 2,
						},
						{
							value: 'a',
							index: 2,
						},
						{
							value: 'a',
							index: 2,
						}
					]
				}
			}
		]
			.forEach(Assert);

	},

	'should match considering flags': {
		'should handle free spacing' () {
			[
				{
					regex: `b(?x)
						# comment
						\\ d
					`,
					input: 'abccb1s',
					match: {
						value: 'b1',
						index: 4,
						groups: []
					}
				}
			].forEach(Assert);
		},
		'should handle case-(in)sensitive' () {
			[
				{
					regex: '(?i)bob|Foo',
					input: 'afOOBob',
					match: {
						value: 'fOO',
						index: 1,
						groups: []
					}
				},
				{
					regex: '(?i)bob|(?-i)Foo',
					input: 'afOOBob',
					index: 4,
					match: {
						value: 'Bob',
						index: 4,
						groups: []
					}
				},
				{
					regex: '((?i)bob)|Foo',
					input: 'afOOBob',
					match: {
						value: 'Bob',
						index: 4,
						groups: [
							{
								value: 'Bob',
								index: 4
							}
						]
					}
				},
				{
					regex: '((?i)bob)|(f[oO]+)',
					input: 'afOOBob',
					index: 1,
					match: {
						value: 'fOO',
						index: 1,
						groups: [
							null,
							{
								value: 'fOO',
								index: 1
							}
						]
					}
				},
				{
					regex: '((?i)\\d+)\\s*((?i)PARTY) in (\\w+)',
					input: 'New Year 2015 Party in London',
					index: 9,
					match: {
						value:'2015 Party in London',
						index: 9,
						groups:[
							{
								value: '2015',
								index: 9,
							},
							{
								value: 'Party',
								index: 14,
							},
							{
								value: 'London',
								index: 23
							}]
					}
				},
				{
					regex: 'a((?i)bc|b)c',
					input: 'abCc',
					index: 0,
					match: {
						value: 'abCc',
						index: 0,
						groups:[
							{
								value: 'bC',
								index: 1
							}
						]
					}
				},
				{
					regex: 'a((?i)bc|b)c',
					input: 'aBc',
					index: 0,
					match: {
						value: 'aBc',
						index: 0,
						groups: [
							{
								value: 'B',
								index: 1
							}
						]
					}
				}
			]
				.forEach(Assert);
		}
	}
});

function Assert(data) {
	var rgx = new Regex(data.regex);
	var match = rgx.exec(data.input);
	if (match == null && data.match != null) {
		throw Error('Pattern shoud be matched: ' + data.regex);
	}

	deepEq_(match, data.match);
}