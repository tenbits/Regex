UTest({

	'should match natives' () {
		[
			{
				regex: 'foo',
				input: 'asdfoooo',
				match: {
					value: 'foo',
					index: 3,
					groups: []
				}
			},
			{
				regex: '[\\d]+',
				input: 'asdf145oooo',
				match: {
					value: '145',
					index: 4,
					groups: []
				}
			},
			{
				regex: '(?:a)d',
				input: 'cdad',
				match: {
					value: 'ad',
					index: 2,
					groups: []
				}
			},
			{
				regex: '(?:a)d|(c)',
				input: 'fdgdc',
				index: 4,
				match: {
					value: 'c',
					index: 4,
					groups: [{
						value: 'c',
						index: 4
					}]
				}
			},
			{
				regex: 'd|((g|(b|(a|c))))',
				input: 'oiac',
				match: {
					value: 'a',
					index: 2,
					groups: [
						{
							value: 'a',
							index: 2,
						},
						{
							value: 'a',
							index: 2,
						},
						{
							value: 'a',
							index: 2,
						},
						{
							value: 'a',
							index: 2,
						}
					]
				}
			}
		]
			.forEach(Assert);

	},

	'should match considering flags': {
		'should handle free spacing' () {
			[
				{
					regex: `b(?x)
						# comment
						\\ d
					`,
					input: 'abccb1s',
					match: {
						value: 'b1',
						index: 4,
						groups: []
					}
				}
			].forEach(Assert);
		},
		'should handle case-(in)sensitive' () {
			console.log('Multiple FLAGS are temporarly disabled');
			return;
			[
				{
					regex: '(?i)bob|Foo',
					input: 'afOOBob',
					match: {
						value: 'fOO',
						index: 1,
						groups: []
					}
				},
				{
					regex: '(?i)bob|(?-i)Foo',
					input: 'afOOBob',
					index: 4,
					match: {
						value: 'Bob',
						index: 4,
						groups: []
					}
				},
				{
					regex: '((?i)bob)|Foo',
					input: 'afOOBob',
					match: {
						value: 'Bob',
						index: 4,
						groups: [
							{
								value: 'Bob',
								index: 4
							}
						]
					}
				},
				{
					regex: '((?i)bob)|(f[oO]+)',
					input: 'afOOBob',
					index: 1,
					match: {
						value: 'fOO',
						index: 1,
						groups: [
							null,
							{
								value: 'fOO',
								index: 1
							}
						]
					}
				},
				{
					regex: '((?i)\\d+)\\s*((?i)PARTY) in (\\w+)',
					input: 'New Year 2015 Party in London',
					index: 9,
					match: {
						value:'2015 Party in London',
						index: 9,
						groups:[
							{
								value: '2015',
								index: 9,
							},
							{
								value: 'Party',
								index: 14,
							},
							{
								value: 'London',
								index: 23
							}]
					}
				},
				{
					regex: 'a((?i)bc|b)c',
					input: 'abCc',
					index: 0,
					match: {
						value: 'abCc',
						index: 0,
						groups:[
							{
								value: 'bC',
								index: 1
							}
						]
					}
				},
				{
					regex: 'a((?i)bc|b)c',
					input: 'aBc',
					index: 0,
					match: {
						value: 'aBc',
						index: 0,
						groups: [
							{
								value: 'B',
								index: 1
							}
						]
					}
				}
			]
				//.slice(6, 7)
				.forEach(Assert);
		}
	},
	'should unmatch' () {

		var rgx = new Regex('\\b([a-zA-Z_?.$][\\w?.$]*)\\s*:\\s*\\b(function)?\\s*(\\()');
		var start = Date.now();
		var match = rgx.match(`
							  window.addEventListener( "load", completed, false );
				`);

		assert.lte_(Date.now() - start, 10);
		eq_(match, null);
	},
	'should match forward slashes' () {
		var rgx = new Regex('//');
		var match = rgx.match('\n // foo')
		eq_(match.index, '2');
		eq_(match.value, '//');
	},
	'should match doc el' () {
		var rgx = new Regex('(?<=\\.)(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))\\b');
		var match = rgx.match('doc.documentElement')
		eq_(match.index, 4);
		eq_(match.value, 'documentElement');
	},
	'should match function params' () {
		var rgx = new Regex("(?:((')(.*?)('))|((\")(.*?)(\")))\\s*:\\s*\\b(function)?\\s*(\\()")
		var match = rgx.match('		"ATTR": function( match ) {');
		eq_(match.index, 2)
		deepEq_(match.groups[4], {
			value: '"ATTR"',
			index: 2
		});
	},
	'should match numbers' () {
		var rgx = new Regex("(?x)\\b\n\t\t\t\t\t\t\t    (0*((1?[0-9]{1,2})|(2([0-4][0-9]|5[0-5])))\\s*,\\s*){2}\n\t\t\t\t\t\t\t    (0*((1?[0-9]{1,2})|(2([0-4][0-9]|5[0-5])))\\b)\n\t\t\t\t\t\t\t    (\\s*,\\s*((0?\\.[0-9]+)|[0-1]))?\n\t\t\t\t\t\t\t");
		var match = rgx.match('0, 0, 0, 0')
		eq_(match.index, 0);
	},
	'should match css font' () {
		var rgx = new Regex("(\\b(?i:arial|century|comic|courier|garamond|georgia|helvetica|impact|lucida|symbol|system|tahoma|times|trebuchet|utopia|verdana|webdings|sans-serif|serif|monospace)\\b)")
		var match = rgx.exec("  font-family: sans-serif;")
		eq_(match.index, 15);
	},

	'should combine lookahead and lookbehind' () {
		var rgx = new Regex("(?<![-a-z])(?=[-a-z])");
		var match = rgx.match("vv;al", 1)
		eq_(match.index, 3);
	},

	'should find keyword' () {
		var rgx = new Regex("(?<![\\.\\$])\\b(break|by|catch|continue|else|finally|for|in|of|if|return|switch|then|throw|try|unless|when|while|until|loop|do|(?<=for)\\s+own)(?!\\s*:)\\b");
		var match = rgx.match('return');
		eq_(match.value, 'return');
	},
	'should find with possessive group' () {
		var rgx = new Regex("(?:(?=\\s)(?:(?<=else|new|return)|(?<!\\w))(\\s+))?(\\b(?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b|::)++)\\s*(\\()");
		var match = rgx.match("return for();");
		eq_(match, null);
	},
	'should match hyperlink' () {
		var rgx = new Regex("((https?|s?ftp|ftps|file|smb|afp|nfs|(x-)?man(-page)?|gopher|txmt|issue):\/\/|mailto:)[-:@a-zA-Z0-9_.,~%+\/?=&#;]+(?<![-.,?:#;])");
		var match = rgx.match('http://github.com');
		eq_(match.value, 'http://github.com');
	},
	'should match but not at the beginning' () {
		var rgx = new Regex("(?:^|(?:(?<!else)))(?!if)")
		var match = rgx.exec("if(1){m()}\n");
		eq_(match.index, 1);
	},
	'should handle start-end of line' : {
		'match' () {
			var rgx = new Regex("^$");
			var match = rgx.exec('foo\n\nbar');
			eq_(match.index, 4);
		},
		'unmatch' () {
			var rgx = new Regex("^$");
			var match = rgx.match('last\n');
			eq_(match, null);
		}
	},
	'should match single group' () {
		var rgx = new Regex("^(ifeq|ifneq)(?=\\s)");
		var match = rgx.match("ifeq   	");
		deepEq_(match.groups, [
			{
				value: 'ifeq',
				index: 0
			}
		]);
	},
	'should parse regex' () {
		var rgx = new Regex("(:)\\b(link|visited|hover|active|focus|target|lang|disabled|enabled|checked|indeterminate|root|nth-child()|nth-last-child()|nth-of-type()|nth-last-of-type()|first-child|last-child|first-of-type|last-of-type|only-child|only-of-type|empty|not|valid|invalid)(\\([0-9A-Za-z]*\\))?")
		var match = rgx.match('a:visited { }');
		eq_(match.value, ':visited');
		eq_(match.index, 1);
		var groups = match.groups;
		eq_(groups.length, 7);

		eq_(groups[0].value, ':');
		eq_(groups[0].index, 1);
		eq_(groups[1].value, 'visited');
		eq_(groups[1].index, 2);

		groups.slice(2).forEach(x => {
			eq_(x.value, null);
			eq_(x.index, 9);
		});

		var match = rgx.match('div, a:nth-of-type(2n) {}', 1);
		eq_(match.value, ':nth-of-type(2n)');
		eq_(match.index, 6);
		var groups = match.groups;
		eq_(groups.length, 7);

		eq_(groups[0].value, ':');
		eq_(groups[0].index, 6);
		eq_(groups[1].value, 'nth-of-type');
		eq_(groups[1].index, 7);

		groups.slice(2, 4).forEach(x => {
			eq_(x.value, null);
			eq_(x.index, 7);
		});
		eq_(groups[6].value, '(2n)');
		eq_(groups[6].index, 18);
	},
	'should find method name' () {
		var regex = new Regex("(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n\t\t\t(\\b \n\t\t\t\t(?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n\t\t\t)\n\t\t\t \\s*(\\()");
		var match = regex.match("if(1){m()}", 0);
		check(match);

		var match = regex.match("if(1){m()}\n", 6);
		check(match);

		function check(match) {
			eq_(match.value, 'm(');
			eq_(match.index, 6);

			var groups = match.groups;
			eq_(groups.length, 4);
			eq_(groups[0], null);
			eq_(groups[1].value, 'm');
			eq_(groups[1].index, 6);
			eq_(groups[2].value, null);
			eq_(groups[3].value, '(');
			eq_(groups[3].index, 7);
		}
	},
	'should unmatch' () {
		var regex = new Regex("(?x)\n    \t\t(?:  ^                                 # begin-of-line\n    \t\t  |  \n    \t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)      #  or word + space before name\n    \t\t       | (?= \\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name\n    \t\t     )\n    \t\t)\n    \t\t(\\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|sizeof|[cr]?iterate)\\s*\\()\n    \t\t(\n    \t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name\n    \t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator\n    \t\t)\n    \t\t \\s*(?=\\()");
		var match = regex.match("if(1){m()}\n", 2);
		eq_(match, null);
	},
	'should find numeric value' () {
		var regex = new Regex("(?x:         # turn on extended mode\n\t\t\t             -?         # an optional minus\n\t\t\t             (?:\n\t\t\t               0        # a zero\n\t\t\t               |        # ...or...\n\t\t\t               [1-9]    # a 1-9 character\n\t\t\t               \\d*      # followed by zero or more digits\n\t\t\t             )\n\t\t\t             (?:\n\t\t\t               (?:\n\t\t\t                 \\.     # a period\n\t\t\t                 \\d+    # followed by one or more digits\n\t\t\t               )?\n\t\t\t               (?:\n\t\t\t                 [eE]   # an e character\n\t\t\t                 [+-]?  # followed by an option +/-\n\t\t\t                 \\d+    # followed by one or more digits\n\t\t\t               )?       # make exponent optional\n\t\t\t             )?         # make decimal portion optional\n\t\t\t           )")
		var match = regex.match('{"foo": 1}');
		eq_(match.value, 1);
		eq_(match.index, 8);
	},
	'should find function' () {
		var regex = new Regex("(?<=^|\\s)(?=@?[a-zA-Z\\$_])(@?[a-zA-Z\\$_](\\w|\\$|:|\\.)*\\s*(?=[:=](\\s*\\(.*\\))?\\s*([=-]>)))")
		var match = regex.match("  destroy: ->", 2);

		eq_(match.value, 'destroy');
		eq_(match.index, 2);
		eq_(match.groups.length, 4);
		eq_(match.groups[0].value, 'destroy');
		eq_(match.groups[0].index, 2);
		eq_(match.groups[1].value, 'y');
		eq_(match.groups[1].index, 8);
		eq_(match.groups[2].value, null);
		eq_(match.groups[3].value, '->');
		eq_(match.groups[3].index, 11);
	},

	'should match function (php)' () {
		var regex = new Regex("\\s*((?:(?:final|abstract|public|private|protected|static)\\s+)*)(function)(?:\\s+|(\\s*&\\s*))(?:(__(?:call|construct|destruct|get|set|isset|unset|tostring|clone|set_state|sleep|wakeup|autoload|invoke|callStatic))|([a-zA-Z0-9_]+))\\s*(\\()");
		var match = regex.match("function hello() {}");
		eq_(match.value, 'function hello(');
		eq_(match.index, 0);
		eq_(match.groups[0].value, '');
		eq_(match.groups[0].index, 0);
		eq_(match.groups[1].value, 'function');
		eq_(match.groups[1].index, 0);
		eq_(match.groups[2].value, null);
		eq_(match.groups[3].value, null);
		eq_(match.groups[4].value, 'hello');
		eq_(match.groups[4].index, 9);
		eq_(match.groups[5].value, '(');
		eq_(match.groups[5].index, 14);
	},

	'should unmatch class' () {
		var regex = new Regex("(?x)\n\t\t\t\tand=|or=|!|%|&|\\^|\\*|\\/|(\\-)?\\-(?!>)|\\+\\+|\\+|~|==|=(?!>)|!=|<=|>=|<<=|>>=|\n\t\t\t\t>>>=|<>|<|>|!|&&|\\.\\.(\\.)?|\\?|\\||\\|\\||\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|&=|\n\t\t\t\t\\^=|\\b(?<![\\.\\$])(instanceof|new|delete|typeof|and|or|is|isnt|not|super)\\b\n\t\t\t");
		var match = regex.match("class Quicksort");
		eq_(match, null);
	}
});

function Assert(data) {
	var rgx = new Regex(data.regex);
	var match = rgx.match(data.input);
	if (match == null && data.match != null) {
		throw Error('Pattern shoud be matched: ' + data.regex);
	}

	deepEq_(match, data.match);

	var arr = rgx.exec(data.input, 0);
	eq_(arr.index, data.match.index);


	var groups = data.match.groups.map(x => x && x.value);
	groups = [ data.match.value, ...groups ];

	deepEq_(Array.from(arr), groups);
}