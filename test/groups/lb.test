UTest({
	'should match positive lookbehind' () {

		var rgx = new Regex('(?<=a)([pr])');
		var match = rgx.match('cbagpdapr');

		deepEq_(match, {
			value: 'p',
			index: 7,
			groups: [
				{
					value: 'p',
					index: 7
				}
			]
		});
	},
	'should match negative lookbehind' () {

		var rgx = new Regex('(?<!a)([pr])');
		var match = rgx.match('cbapdagpr');
		deepEq_(match, {
			value: 'p',
			index: 7,
			groups: [
				{
					value: 'p',
					index: 7
				}
			]
		});
	},
	'should match' () {
		[
			{
				regex: '(?<=a|^)b',
				test: [
					{
						input: 'bd',
						match: {
							value: 'b',
							index: 0,
							groups: []
						}
					},
					{
						input: 'cbbab',
						match: {
							value: 'b',
							index: 4,
							groups: []
						}
					}
				]
			},
			{
				regex: 'c|(?<=a|^)b',
				test: [
					{
						input: 'bd',
						match: {
							value: 'b',
							index: 0,
							groups: []
						}
					},
					{
						input: 'kbbab',
						match: {
							value: 'b',
							index: 4,
							groups: []
						}
					},
					{
						input: 'cbbab',
						match: {
							value: 'c',
							index: 0,
							groups: []
						}
					}
				]
			}
		]
		.forEach(data => data.test.forEach(x => {
			var rgx = new Regex(data.regex);
			var match = rgx.match(x.input);
			if (match == null) {
				eq_(x.match, null);
				return;
			}

			deepEq_(match, x.match);
		}));
	}

})