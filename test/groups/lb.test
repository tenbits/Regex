UTest({
	'should match positive lookbehind' () {

		var rgx = new Regex('(?<=a)([pr])');
		var match = rgx.exec('cbagpdapr');

		deepEq_(Array.from(match), ['p', 'p']);
		eq_(match.index, 7);
	},
	'should match negative lookbehind' () {

		var rgx = new Regex('(?<!a)([pr])');
		var match = rgx.exec('cbapdagpr');

		deepEq_(Array.from(match), ['p', 'p']);
		eq_(match.index, 7);
	},
	'!should match' () {
		[
			{
				regex: '(?<=a|^)b',
				test: [
					{
						input: 'bd',
						match: ['b'],
						index: 0
					},
					{
						input: 'cbbab',
						match: ['b'],
						index: 4
					}
				]
			},
			{
				regex: 'c|(?<=a|^)b',
				test: [
					{
						input: 'bd',
						match: ['b'],
						index: 0
					},
					{
						input: 'kbbab',
						match: ['b'],
						index: 4
					},
					{
						input: 'cbbab',
						match: ['c'],
						index: 0
					}
				]
			}
		]
		.forEach(data => data.test.forEach(x => {
			var rgx = new Regex(data.regex);
			var match = rgx.exec(x.input);
			if (match == null) {
				eq_(x.match, null);
				return;
			}
			deepEq_(Array.from(match), x.match);
			eq_(match.index, x.index);
		}));
	}

})