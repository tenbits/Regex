UTest({
	'should match positive lookbehind' () {

		var rgx = new Regex('(?<=a)([pr])');
		var match = rgx.match('cbagpdapr');

		has_(match, {
			value: 'p',
			index: 7,
			groups: [
				{
					value: 'p',
					index: 7
				}
			]
		});
	},
	'should match negative lookbehind' () {

		var rgx = new Regex('(?<!a)([pr])');
		var match = rgx.match('cbapdagpr');
		deepEq_(match, {
			value: 'p',
			index: 7,
			groups: [
				{
					value: 'p',
					index: 7
				}
			]
		});
	},
	'should match' () {
		[
			{
				regex: '(?<=a|^)b',
				test: [
					{
						input: 'bd',
						match: {
							value: 'b',
							index: 0,
							groups: []
						}
					},
					{
						input: 'cbbab',
						match: {
							value: 'b',
							index: 4,
							groups: []
						}
					}
				]
			},
			{
				regex: 'c|(?<=a|^)b',
				test: [
					{
						input: 'bd',
						match: {
							value: 'b',
							index: 0,
							groups: []
						}
					},
					{
						input: 'kbbab',
						match: {
							value: 'b',
							index: 4,
							groups: []
						}
					},
					{
						input: 'cbbab',
						match: {
							value: 'c',
							index: 0,
							groups: []
						}
					}
				]
			}
		]
		.forEach(data => data.test.forEach(x => {
			var rgx = new Regex(data.regex);
			var match = rgx.match(x.input);
			if (match == null) {
				eq_(x.match, null);
				return;
			}

			deepEq_(match, x.match);
		}));
	},
	'should except lb in OR' () {
		var rgx = new Regex("(?i)\\bRFC(?: |(?<= RFC))(\\d+)\\b");
		var match = rgx.match('-RFC12 RFC 14');
		deepEq_(match, {
			index: 7,
			value: 'RFC 14',
			groups: [
				{
					value: '14',
					index: 11
				}
			]
		});
	},
	'should unmatch with lookbehind' () {
		var rgx = new Regex("(?<!\\.)\\b(boolean|byte|char|class|double|enum|float|function|int|interface|long|short|void)\\b");
		var match = rgx.match('(function( window, undefined ) {');

		debugger;
		has_(match, {
			value: 'function',
			index: 1,
			groups: [
				{
					value: 'function',
					index: 1
				}
			]
		});

		match = rgx.match("(.function boo)", 0);
		eq_(match, null);
	}

})

// vim: set ft=js: