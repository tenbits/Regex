UTest({
	'should create named group' () {
		[
			"(?<number>\\d+)(\\s+)(?<foo>\\w+)",
			"(?'number'\\d+)(\\s+)(?'foo'\\w+)",
		]
		.forEach(str => {
			var rgx = new Regex(str);
			var match = rgx.exec('New 2015  Baz');
			eq_(match.groups.number, '2015');
			eq_(match.groups.foo, 'Baz');
		});
	},
	'should create deep nested not native named group' () {
		[
			"a((?i)b)([\\w]+?(?<num>\\d+))",
			"a((?i)b)([a-z]+(?'num'\\d+))",
		]
		.forEach(str => {
			var rgx = new Regex(str);
			var match = rgx.exec('some aBtram42C');
			eq_(match.groups.num, '42');
		});
	},
	'should match backreference' () {
		[
			"(?<me>a|b)hello\\k<me>",
			"(?'me'a|b)hello\\k'me'",
			"(?'me'a|b)hello\\k<me>",
		]
		.forEach(str => {
			var rgx = new Regex(str);
			var match = rgx.exec('some ahelloa baz');
			deepEq_(Array.from(match), ['ahelloa', 'a']);
			eq_(match.groups.me, 'a');
		});
	}
});