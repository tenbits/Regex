UTest({
	'should create named group' () {
		[
			"(?<number>\\d+)(\\s+)(?<foo>\\w+)",
			"(?'number'\\d+)(\\s+)(?'foo'\\w+)",
		]
		.forEach(str => {
			var rgx = new Regex(str);
			var match = rgx.match('New 2015  Baz');
			eq_(match.groups.number, '2015');
			eq_(match.groups.foo, 'Baz');
		});
	},
	'should create deep nested not native named group' () {
		[
			"a((?i)b)([\\w]+?(?<num>\\d+))",
			"a((?i)b)([a-z]+(?'num'\\d+))",
		]
		.forEach(str => {
			var rgx = new Regex(str);
			var match = rgx.match('some aBtram42C');
			eq_(match.groups.num, '42');
		});
	},
	'should match backreference' () {
		[
			"(?<me>a|b)hello\\k<me>",
			"(?'me'a|b)hello\\k'me'",
			"(?'me'a|b)hello\\k<me>",
		]
		.forEach(str => {
			var rgx = new Regex(str);
			var match = rgx.match('some ahelloa baz');
			has_(match, {
				value: 'ahelloa',
				index: 5,
				groups: [
						{
							value: 'a',
							index: 5
						}
				]
			});
			eq_(match.groups.me, 'a');
		});
	},
	'should include sub-expression' () {
		[
			{
				regex: "(?<me>a|b)hello\\g<me>",
				input: 'some ahellob baz',
				match: {
					value: 'ahellob',
					index: 5,
					groups: [
							{
								value: 'a',
								index: 5
							}
					]
				},
				groups: {
					me: 'a'
				}
			},
			{
				regex: "Handy ((?<some>[a-z]|1)+) hello(?<baz>\\s+\\g<some>) \\g<some>",
				input: 'wow Handy tt hello  z 1',
				match: {
					value: 'Handy tt hello  z 1',
					index: 4,
					groups: [
						{
							value: 't',
							index: 10
						},
						{
							value: '  z',
							index: 18
						}
					]
				},
				groups: {
					some: 't',
					baz: '  z'
				}
			}
		]
		.forEach(data => {
			var rgx = new Regex(data.regex);
			var match = rgx.match(data.input);
			has_(match, data.match);
			for (var key in data.groups)
				eq_(match.groups[key], data.groups[key]);
		});
	}
});

// vim: set ft=js: