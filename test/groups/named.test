UTest({
	'should create named group' () {
		[
			"(?<number>\\d+)(\\s+)(?<foo>\\w+)",
			"(?'number'\\d+)(\\s+)(?'foo'\\w+)",
		]
		.forEach(str => {
			var rgx = new Regex(str);
			var match = rgx.match('New 2015  Baz');
			eq_(match.groups.number, '2015');
			eq_(match.groups.foo, 'Baz');
		});
	},
	'should create deep nested not native named group' () {
		[
			"a((?i)b)([\\w]+?(?<num>\\d+))",
			"a((?i)b)([a-z]+(?'num'\\d+))",
		]
		.forEach(str => {
			var rgx = new Regex(str);
			var match = rgx.match('some aBtram42C');
			eq_(match.groups.num, '42');
		});
	},
	'should match backreference' () {
		[
			"(?<me>a|b)hello\\k<me>",
			"(?'me'a|b)hello\\k'me'",
			"(?'me'a|b)hello\\k<me>",
		]
		.forEach(str => {
			var rgx = new Regex(str);
			var match = rgx.match('some ahelloa baz');
			has_(match, {
				value: 'ahelloa',
				index: 5,
				groups: [
						{
							value: 'a',
							index: 5
						}
				]
			});
			eq_(match.groups.me, 'a');
		});
	},
	'should include sub-expression' () {
		[
			"(?<me>a|b)hello\\g<me>"
		]
		.forEach(str => {
			var rgx = new Regex(str);
			var match = rgx.match('some ahellob baz');
			has_(match, {
				value: 'ahellob',
				index: 5,
				groups: [
						{
							value: 'a',
							index: 5
						}
				]
			});
			eq_(match.groups.me, 'a');
		});
	}
});