UTest({
	'should match' () {
		Assert({
			regex: 'a(bc|b)c',
			input: 'abcc',
			index: 0,
			match: ['abcc', 'bc']
		});
		Assert({
			regex: 'a(?>bc|b)c',
			input: 'abcc',
			index: 0,
			match: ['abcc', 'bc']
		});
	},
	'should once match and fail' () {
		Assert({
			regex: 'a(bc|b)c',
			input: 'abc',
			index: 0,
			match: ['abc', 'b']
		});
		Assert({
			regex: 'a(?>bc|b)c',
			input: 'abc',
			match: null
		});
	},
});


function Assert(data) {
	var rgx = new Regex(data.regex);
	var match = rgx.exec(data.input);
	if (data.match == null) {
		eq_(null, match, 'Pattern shoud be matched: ' + data.regex);
		return;
	}

	eq_(match.index, data.index);

	var arr = Array.from(match);
	deepEq_(arr, data.match);
}